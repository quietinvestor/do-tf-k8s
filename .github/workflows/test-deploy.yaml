name: Test deployment
on: [push, workflow_dispatch]
jobs:
  test-deploy:
    runs-on: ubuntu-22.04
    environment: test
    env:
      DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      test_schema_name: ${{ secrets.TEST_SCHEMA_NAME }}
      test_seq_name: ${{ secrets.TEST_SEQ_NAME }}
      test_group_name: ${{ secrets.TEST_GROUP_NAME }}
      test_user_name: ${{ secrets.TEST_USER_NAME }}
      test_user_password: ${{ secrets.TEST_USER_PASSWORD }}
      TF_VAR_do_environment: ${{ secrets.TF_VAR_DO_ENVIRONMENT }}
      TF_VAR_do_project_description: ${{ secrets.TF_VAR_DO_PROJECT_DESCRIPTION }}
      TF_VAR_do_project_environment: ${{ secrets.TF_VAR_DO_PROJECT_ENVIRONMENT }}
      TF_VAR_do_project_name: ${{ secrets.TF_VAR_DO_PROJECT_NAME }}
      TF_VAR_do_project_purpose: ${{ secrets.TF_VAR_DO_PROJECT_PURPOSE }}
      TF_VAR_do_region: ${{ secrets.TF_VAR_DO_REGION }}
      TF_VAR_do_db_cluster_postgresql_node_number: ${{ secrets.TF_VAR_DO_DB_CLUSTER_POSTGRESQL_NODE_NUMBER }}
      TF_VAR_do_db_cluster_postgresql_node_size: ${{ secrets.TF_VAR_DO_DB_CLUSTER_POSTGRESQL_NODE_SIZE }}
      TF_VAR_do_db_cluster_postgresql_version: ${{ secrets.TF_VAR_DO_DB_CLUSTER_POSTGRESQL_VERSION }}
      TF_VAR_do_db_cluster_postgresql_window_day: ${{ secrets.TF_VAR_DO_DB_CLUSTER_POSTGRESQL_WINDOW_DAY }}
      TF_VAR_do_db_cluster_postgresql_window_hour: ${{ secrets.TF_VAR_DO_DB_CLUSTER_POSTGRESQL_WINDOW_HOUR }}
      TF_VAR_do_db_postgresql_terraform_backend_name: ${{ secrets.TF_VAR_DO_DB_POSTGRESQL_TERRAFORM_BACKEND_NAME }}
      TF_VAR_do_vpc_postgresql_description: ${{ secrets.TF_VAR_DO_VPC_POSTGRESQL_DESCRIPTION }}
      TF_VAR_do_vpc_postgresql_ip_range: ${{ secrets.TF_VAR_DO_VPC_POSTGRESQL_IP_RANGE }}
      TF_VAR_ip_local_admin: ${{ secrets.TF_VAR_IP_LOCAL_ADMIN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Setup Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: 3.12.1
      - name: Install Python script package dependencies
        run: pip install -r scripts/python/requirements.txt
      - name: Install Terraform
        uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36 # v3.0.0
        with:
          terraform_version: 1.6.5
      - name: Check Terraform file format
        run: terraform fmt -check
      - name: Initialise Terraform
        run: terraform init
      - name: Validate Terraform code
        run: terraform validate
      - name: Get GitHub Actions runner IP address
        run: |
          ip_github_actions_runner=$(curl -s https://api.ipify.org/)
          echo "::add-mask::$ip_github_actions_runner"
          echo "TF_VAR_ip_github_actions_runner=$ip_github_actions_runner" >> $GITHUB_ENV
      - name: Create Terraform plan
        run: terraform plan
      - name: Apply Terraform plan
        run: terraform apply -auto-approve
      - name: Create test Terraform PostgreSQL backend
        run: |
          python scripts/python/postgresql-backend-create.py \
          -t "$DIGITALOCEAN_ACCESS_TOKEN" \
          -c "db-postgresql-${TF_VAR_do_region}-${TF_VAR_do_project_name}-${TF_VAR_do_environment}" \
          -d "$TF_VAR_do_db_postgresql_terraform_backend_name" \
          -s "$test_schema_name" \
          -q "$test_seq_name" \
          -g "$test_group_name" \
          -u "$test_user_name" \
          -p "$test_user_password"
      - name: Placeholder for additional steps
        run: sleep 60 # Pause for 1 minute
      - name: Destroy Terraform deployment
        run: terraform destroy -auto-approve

